#!/usr/bin/env bash

@@GENERATED_MESSAGE@@

set -euo pipefail

EXEC_PATH=@@EXEC_PATH@@
SOURCE=@@SOURCE@@
BUILD_LABEL_DESTINTATION=@@DESTINATION@@


# --- begin runfiles.bash initialization ---

if [[ ! -d "${RUNFILES_DIR:-/dev/null}" && ! -f "${RUNFILES_MANIFEST_FILE:-/dev/null}" ]]; then
    if [[ -f "$0.runfiles_manifest" ]]; then
      export RUNFILES_MANIFEST_FILE="$0.runfiles_manifest"
    elif [[ -f "$0.runfiles/MANIFEST" ]]; then
      export RUNFILES_MANIFEST_FILE="$0.runfiles/MANIFEST"
    elif [[ -f "$0.runfiles/bazel_tools/tools/bash/runfiles/runfiles.bash" ]]; then
      export RUNFILES_DIR="$0.runfiles"
    fi
fi
if [[ -f "${RUNFILES_DIR:-/dev/null}/bazel_tools/tools/bash/runfiles/runfiles.bash" ]]; then
  source "${RUNFILES_DIR}/bazel_tools/tools/bash/runfiles/runfiles.bash"
elif [[ -f "${RUNFILES_MANIFEST_FILE:-/dev/null}" ]]; then
  source "$(grep -m1 "^bazel_tools/tools/bash/runfiles/runfiles.bash " \
            "$RUNFILES_MANIFEST_FILE" | cut -d ' ' -f 2-)"
else
  echo >&2 "ERROR: cannot find @bazel_tools//tools/bash/runfiles:runfiles.bash"
  exit 1
fi

# --- end runfiles.bash initialization ---

# helpers

function find_bin_dir(){
    local EXECROOT_LOC=$(echo $1 | awk 'END{print index($0,"/execroot/")}')
    local PROJECT_LOC=$((EXECROOT_LOC+9))
    local BIN_DIR_WITHOUT_PROJECT_NAME=${$1:0:$PROJECT_LOC}
    local PROJECT_NAME_WITH_EXTRA=${$1:$PROJECT_LOC}
    local END_INDEX_PROJECT_LOC=$(echo $PROJECT_NAME_WITH_EXTRA | awk 'END{print index($0,"/")}')
    local END_INDEX_PROJECT_LOC=$((END_INDEX_PROJECT_LOC-1))
    local PROJECT_NAME=${PROJECT_NAME_WITH_EXTRA:0:END_INDEX_PROJECT_LOC}
    find_bin_dir_result=$BIN_DIR_WITHOUT_PROJECT_NAME$PROJECT_NAME
}

# end helpers

BUILD_ABS_DESTINTATION="$(rlocation $BUILD_LABEL_DESTINTATION)"
DESTINATION=$(dirname $BUILD_ABS_DESTINTATION)

find_bin_dir $PWD
abs_bin_dir=$find_bin_dir_result


SOURCE=$abs_bin_dir"/"$SOURCE
cp -rf $SOURCE $DESTINATION